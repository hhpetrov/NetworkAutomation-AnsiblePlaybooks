---
- name: Retrieve specific interface from a Junos device and display device name
  hosts: all
  gather_facts: no
  connection: local

  vars:
    device_interface_map:
      "172.18.3.13":
        interface: "ge-0/0/9.102"
        commands:
          - show interfaces
          - show interfaces terse
      "172.18.1.40":
        interface: "ge-0/0/9.102"
        commands:
          - show interfaces
          - show interfaces terse

  tasks:
    - name: Display inventory hostname
      ansible.builtin.debug:
        msg: "Inventory hostname: {{ inventory_hostname }}"

    - name: Retrieve device hostname
      junipernetworks.junos.junos_command:
        commands:
          - show version | match Hostname
      register: device_info

    - name: Extract the device hostname from the output
      ansible.builtin.set_fact:
        device_hostname: "{{ (device_info.stdout_lines[0] | select('search', 'Hostname:') | list)[0].split(':')[-1] | trim }}"
      when: device_info.stdout_lines is defined and device_info.stdout_lines | length > 0

    - name: Display the device hostname
      ansible.builtin.debug:
        msg: "Device: {{ device_hostname }}"

    - name: Check if the device is in the map
      ansible.builtin.set_fact:
        interface_info: "{{ device_interface_map[inventory_hostname] }}"
      when: inventory_hostname in device_interface_map

    - name: Run commands based on interface info
      junipernetworks.junos.junos_command:
        commands: "{{ interface_info.commands }}"
      register: command_outputs
      when: interface_info is defined

    - name: Filter and display output for 'show interfaces'
      ansible.builtin.debug:
        msg: |
          Device: {{ device_hostname }}
          Show Interfaces:
          {% if command_outputs.stdout_lines[0] is defined %}
          {{ command_outputs.stdout_lines[0] | regex_search('.*{{ interface_info.interface }}.*', multiline=True) | join('\n') if command_outputs.stdout_lines[0] | regex_search('.*{{ interface_info.interface }}.*', multiline=True) is defined else 'No output' }}
          {% else %}
          No output
          {% endif %}

    - name: Filter and display output for 'show interfaces terse'
      ansible.builtin.debug:
        msg: |
          Device: {{ device_hostname }}
          Show Interfaces Terse:
          {% if command_outputs.stdout_lines[1] is defined %}
          {{ command_outputs.stdout_lines[1] | regex_search('.*{{ interface_info.interface }}.*', multiline=True) | join('\n') if command_outputs.stdout_lines[1] | regex_search('.*{{ interface_info.interface }}.*', multiline=True) is defined else 'No output' }}
          {% else %}
          No output
          {% endif %}
